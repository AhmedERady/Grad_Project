--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=9 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_fla
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[8..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[8..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode2365w[1..0]	: WIRE;
	w_anode2374w[3..0]	: WIRE;
	w_anode2391w[3..0]	: WIRE;
	w_anode2401w[3..0]	: WIRE;
	w_anode2411w[3..0]	: WIRE;
	w_anode2421w[3..0]	: WIRE;
	w_anode2431w[3..0]	: WIRE;
	w_anode2441w[3..0]	: WIRE;
	w_anode2451w[3..0]	: WIRE;
	w_anode2463w[1..0]	: WIRE;
	w_anode2470w[3..0]	: WIRE;
	w_anode2481w[3..0]	: WIRE;
	w_anode2491w[3..0]	: WIRE;
	w_anode2501w[3..0]	: WIRE;
	w_anode2511w[3..0]	: WIRE;
	w_anode2521w[3..0]	: WIRE;
	w_anode2531w[3..0]	: WIRE;
	w_anode2541w[3..0]	: WIRE;
	w_data2363w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[8..0] = eq_wire[8..0];
	eq_wire[] = ( ( w_anode2541w[3..3], w_anode2531w[3..3], w_anode2521w[3..3], w_anode2511w[3..3], w_anode2501w[3..3], w_anode2491w[3..3], w_anode2481w[3..3], w_anode2470w[3..3]), ( w_anode2451w[3..3], w_anode2441w[3..3], w_anode2431w[3..3], w_anode2421w[3..3], w_anode2411w[3..3], w_anode2401w[3..3], w_anode2391w[3..3], w_anode2374w[3..3]));
	w_anode2365w[] = ( (w_anode2365w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode2374w[] = ( (w_anode2374w[2..2] & (! w_data2363w[2..2])), (w_anode2374w[1..1] & (! w_data2363w[1..1])), (w_anode2374w[0..0] & (! w_data2363w[0..0])), w_anode2365w[1..1]);
	w_anode2391w[] = ( (w_anode2391w[2..2] & (! w_data2363w[2..2])), (w_anode2391w[1..1] & (! w_data2363w[1..1])), (w_anode2391w[0..0] & w_data2363w[0..0]), w_anode2365w[1..1]);
	w_anode2401w[] = ( (w_anode2401w[2..2] & (! w_data2363w[2..2])), (w_anode2401w[1..1] & w_data2363w[1..1]), (w_anode2401w[0..0] & (! w_data2363w[0..0])), w_anode2365w[1..1]);
	w_anode2411w[] = ( (w_anode2411w[2..2] & (! w_data2363w[2..2])), (w_anode2411w[1..1] & w_data2363w[1..1]), (w_anode2411w[0..0] & w_data2363w[0..0]), w_anode2365w[1..1]);
	w_anode2421w[] = ( (w_anode2421w[2..2] & w_data2363w[2..2]), (w_anode2421w[1..1] & (! w_data2363w[1..1])), (w_anode2421w[0..0] & (! w_data2363w[0..0])), w_anode2365w[1..1]);
	w_anode2431w[] = ( (w_anode2431w[2..2] & w_data2363w[2..2]), (w_anode2431w[1..1] & (! w_data2363w[1..1])), (w_anode2431w[0..0] & w_data2363w[0..0]), w_anode2365w[1..1]);
	w_anode2441w[] = ( (w_anode2441w[2..2] & w_data2363w[2..2]), (w_anode2441w[1..1] & w_data2363w[1..1]), (w_anode2441w[0..0] & (! w_data2363w[0..0])), w_anode2365w[1..1]);
	w_anode2451w[] = ( (w_anode2451w[2..2] & w_data2363w[2..2]), (w_anode2451w[1..1] & w_data2363w[1..1]), (w_anode2451w[0..0] & w_data2363w[0..0]), w_anode2365w[1..1]);
	w_anode2463w[] = ( (w_anode2463w[0..0] & data_wire[3..3]), enable_wire);
	w_anode2470w[] = ( (w_anode2470w[2..2] & (! w_data2363w[2..2])), (w_anode2470w[1..1] & (! w_data2363w[1..1])), (w_anode2470w[0..0] & (! w_data2363w[0..0])), w_anode2463w[1..1]);
	w_anode2481w[] = ( (w_anode2481w[2..2] & (! w_data2363w[2..2])), (w_anode2481w[1..1] & (! w_data2363w[1..1])), (w_anode2481w[0..0] & w_data2363w[0..0]), w_anode2463w[1..1]);
	w_anode2491w[] = ( (w_anode2491w[2..2] & (! w_data2363w[2..2])), (w_anode2491w[1..1] & w_data2363w[1..1]), (w_anode2491w[0..0] & (! w_data2363w[0..0])), w_anode2463w[1..1]);
	w_anode2501w[] = ( (w_anode2501w[2..2] & (! w_data2363w[2..2])), (w_anode2501w[1..1] & w_data2363w[1..1]), (w_anode2501w[0..0] & w_data2363w[0..0]), w_anode2463w[1..1]);
	w_anode2511w[] = ( (w_anode2511w[2..2] & w_data2363w[2..2]), (w_anode2511w[1..1] & (! w_data2363w[1..1])), (w_anode2511w[0..0] & (! w_data2363w[0..0])), w_anode2463w[1..1]);
	w_anode2521w[] = ( (w_anode2521w[2..2] & w_data2363w[2..2]), (w_anode2521w[1..1] & (! w_data2363w[1..1])), (w_anode2521w[0..0] & w_data2363w[0..0]), w_anode2463w[1..1]);
	w_anode2531w[] = ( (w_anode2531w[2..2] & w_data2363w[2..2]), (w_anode2531w[1..1] & w_data2363w[1..1]), (w_anode2531w[0..0] & (! w_data2363w[0..0])), w_anode2463w[1..1]);
	w_anode2541w[] = ( (w_anode2541w[2..2] & w_data2363w[2..2]), (w_anode2541w[1..1] & w_data2363w[1..1]), (w_anode2541w[0..0] & w_data2363w[0..0]), w_anode2463w[1..1]);
	w_data2363w[2..0] = data_wire[2..0];
END;
--VALID FILE
